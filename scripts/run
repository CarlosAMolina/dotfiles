#!/bin/bash

# Example of usage:
# Dry run and only script that contains `fzf`:
# ```
# ./scripts/run --dry fzf
# ```

set -e # Exit if any command fails.

script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
dry_run="0"

while [[ $# -gt 0 ]]; do
    echo "ARG: \"$1\""
    if [[ "$1" == "--dry" ]]; then
        dry_run="1"
    else
        filter="$1"
    fi
    shift
done

log() {
    if [[ $dry_run == "1" ]]; then
        echo "[DRY_RUN] $@"
    else
        echo "[DEBUG] $@"
    fi
}

execute() {
    log "execute $@"
    if [[ $dry_run == "1" ]]; then
        return
    fi
    "$@"
}

log Start host configuration

create_dir() {
    if [ -d "$@" ]; then
        log The "$@" folder already exists
    else
        log The "$@" folder does not exists. Creating
        execute mkdir -p "$@"
    fi
}

if echo "dir" | grep -qv "$filter"; then
    log "filtered: $filter -- dir"
else
    log Creating directories
    create_dir ~/Software
    create_dir ~/.local/bin
    create_dir ~/.ssh
fi

# First, install software required by other software installed later.
if echo "$script_dir/runs-no-loop/apt" | grep -qv "$filter"; then
    log "filtered: $filter -- $script_dir/runs-no-loop/apt"
else
    execute runs-no-loop/apt
fi

if echo "$script_dir/runs-no-loop/git" | grep -qv "$filter"; then
    log "filtered: $filter -- $script_dir/runs-no-loop/git"
else
    execute runs-no-loop/git
fi

# Install software whose installation order is not important.
scripts=`find $script_dir/runs -mindepth 1 -maxdepth 1 -executable`
for script in $scripts; do
    if echo "$script" | grep -qv "$filter"; then
        log "filtered: $filter -- $script"
        continue
    fi
    execute $script
done

# Final software to run.
if echo "autoremove" | grep -qv "$filter"; then
    log "filtered: $filter -- autoremove"
else
    log Uninstalling unrequired packages
    execute sudo apt autoremove
fi

log "Configuration done :)"
