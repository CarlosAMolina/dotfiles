#!/bin/bash

# TODO move the .config folder out of the scripts folder.

# Usage example.
# Dry run and only script that contains `fzf`:
# ```
# ./scripts/run --dry fzf
# ```

set -e # Exit if any command fails.

script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
dry_run="0"

while [[ $# -gt 0 ]]; do
    echo "ARG: \"$1\""
    if [[ "$1" == "--dry" ]]; then
        dry_run="1"
    else
        filter="$1"
    fi
    shift
done

log() {
    if [[ $dry_run == "1" ]]; then
        echo "[DRY_RUN] $@"
    else
        echo "[DEBUG] $@"
    fi
}

execute() {
    log "execute $@"
    if [[ $dry_run == "1" ]]; then
        return
    fi
    "$@"
}

create_dir() {
    if [ -d "$@" ]; then
        log The "$@" folder already exists
    else
        log The "$@" folder does not exists. Creating
        execute mkdir -p "$@"
    fi
}

copy_dir() {
    pushd $1 > /dev/null
    to=$2
    dirs=$(find . -maxdepth 1 -mindepth 1 -type d)
    for dir in $dirs; do
        execute rm -rf $to/$dir
        execute cp -r $dir $to/$dir
    done
    popd > /dev/null
}

copy_file() {
    from=$1
    to=$2
    name=$(basename $from)
    if [ -f "$to/$name" ]; then
        execute rm $to/$name
    fi
    execute cp $from $to/$name
}

copy_files() {
    pushd $1 > /dev/null
    from=$1
    to=$2
    files=$(find . -maxdepth 1 -mindepth 1 -type f)
    for file_ in $files; do
        copy_file $from/$file_ $to
    done
    popd > /dev/null
}

execute_script() {
    script=$1
    if echo "$script" | grep -qv "$filter"; then
        log "filtered: $filter -- $script"
    else
        execute $script
    fi
}

log Start host configuration

# First, run software required by other software executed later.

if echo "dir" | grep -qv "$filter"; then
    log "filtered: $filter -- dir"
else
    log Creating directories
    dirs=(
        ~/Software
        ~/.local/bin
        ~/.ssh
        ~/.config
    )
    for dir in "${dirs[@]}"; do
        create_dir $dir
    done
fi

if echo "config" | grep -qv "$filter"; then
    log "filtered: $filter -- config"
else
    log Copying config folders from $script_dir/.config
    copy_dir $script_dir/.config $HOME/.config
    log Copying config files from $script_dir/.config
    copy_files $script_dir/.config $HOME
fi

script_names=(
    apt
    git
    dotfiles_
)
for script_name in "${script_names[@]}"; do
    script="$script_dir/runs-in-order/$script_name"
    execute_script $script
done

# Install software whose installation order is not important.
scripts=`find $script_dir/runs -mindepth 1 -maxdepth 1 -executable`
for script in $scripts; do
    execute_script $script
done

# Final software to run.
if echo "autoremove" | grep -qv "$filter"; then
    log "filtered: $filter -- autoremove"
else
    log Uninstalling unrequired packages
    execute sudo apt autoremove
fi

log "Configuration done :)"
