#!/bin/bash

# Other projects example:
# https://github.com/basecamp/omakub/tree/master

set -e # Exit if any command fails.

echo [DEBUG] Start host configuration

echo [DEBUG] Creating folders
if [ -d ~/Software ]; then
  echo [DEBUG] The ~/Software folder already exists
else
  echo [DEBUG] The ~/Software folder does not exists. Start creating the folder
  mkdir ~/Software
fi
if [ -d ~/.local/bin ]; then
  echo [DEBUG] The ~/.local/bin folder already exists
else
  echo [DEBUG] The ~/.local/bin folder does not exists. Start creating the folder
  mkdir -p ~/.local/bin
fi
if [ -d ~/.ssh ]; then
  echo [DEBUG] The ~/.ssh folder already exists
else
  echo [DEBUG] The ~/.ssh folder does not exists. Start creating the folder
  mkdir ~/.ssh
fi

echo [DEBUG] Updating apt
sudo apt update

echo [DEBUG] Installing software using apt
sudo apt install -y build-essential # installs: make
sudo apt install -y curl
sudo apt install -y git
sudo apt install -y htop
sudo apt install -y meld
sudo apt install -y ripgrep # Required by telescope nvim extension.
sudo apt install -y tmux
sudo apt install -y trash-cli
sudo apt install -y xclip
sudo apt install -y zip

./config/ssh-github

echo [DEBUG] Installing software using source files

if [ -d ~/Software/toc-markdown ]; then
  ./update/toc-markdown
else
  ./install/toc-markdown

if [ -d ~/Software/dotfiles ]; then
  echo [DEBUG] The ~/Software/dotfiles folder already exists. Updating
  cd ~/Software/dotfiles
  git checkout main
  git pull origin main
  cd -
else
  ./install/dotfiles

./install/nvm

cd /tmp
echo [DEBUG] Installing and configuring neovim
wget -O nvim.tar.gz "https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz"
tar -xf nvim.tar.gz
sudo install nvim-linux64/bin/nvim /usr/local/bin/nvim
# https://github.com/vscode-neovim/vscode-neovim/issues/597#issuecomment-1617282040
sudo mkdir -p /usr/local/share/nvim/
sudo cp -r nvim-linux64/share/nvim/runtime/ /usr/local/share/nvim/
rm -rf nvim-linux64 nvim.tar.gz
cd -
sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
mkdir -p ~/.config/nvim
cp ~/Software/dotfiles/dotfiles/config/nvim/init.vim ~/.config/nvim/
nvim -c 'PlugInstall'
echo [DEBUG] Installing and configuring keepassxc
wget https://github.com/keepassxreboot/keepassxc/releases/download/2.7.9/KeePassXC-2.7.9-x86_64.AppImage -O ~/.local/bin/KeePassXC.AppImage 
chmod +x ~/.local/bin/KeePassXC.AppImage

echo [DEBUG] Installing sublime text
# https://www.sublimetext.com/docs/linux_repositories.html#apt
wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/sublimehq-archive.gpg > /dev/null
echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list
sudo apt-get update
sudo apt-get install sublime-text

echo [DEBUG] Configuring dotfiles
if [ -f ~/.bashrc.backup ]; then
    echo [DEBUG] File ~/.bashrc.backup already exists
else
    echo [DEBUG] File ~/.bashrc.backup does not exist. Creating
    cp ~/.bashrc ~/.bashrc.backup
fi
cp ~/Software/dotfiles/dotfiles/config/bash/.bash* ~
cp ~/Software/dotfiles/dotfiles/config/git/.gitconfig ~
cp ~/Software/dotfiles/dotfiles/config/tmux/.tmux.conf ~
# https://unix.stackexchange.com/a/66607
#tmux source ~/.tmux.conf

# Add Docker's official GPG key:
echo [DEBUG] Installing Docker
sudo apt-get update
sudo apt-get install -y ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo docker run --rm hello-world
sudo docker rmi hello-world
echo [DEBUG] Configuring Docker rootless
# https://docs.docker.com/engine/security/rootless/
sudo apt-get install -y dbus-user-session
sudo apt-get install -y fuse-overlayfs
sudo apt-get install -y slirp4netns
sudo apt-get install -y uidmap
/usr/bin/dockerd-rootless-setuptool.sh install
docker run --rm hello-world
docker rmi hello-world

echo [DEBUG] Installing github cli
# https://github.com/cli/cli/blob/trunk/docs/install_linux.md
(type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \
&& sudo mkdir -p -m 755 /etc/apt/keyrings \
&& wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
&& sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
&& echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
&& sudo apt update \
&& sudo apt install gh -y

./install/dbeaver

echo [DEBUG] Uninstalling unrequired packages
sudo apt autoremove

echo "[DEBUG] Some manual steps are required"
read -p "[DEBUG] Open \`vi\` and execute \`:PlugInstall\`. Press Enter to continue when done" </dev/tty
cp ~/Software/dotfiles/dotfiles/config/nvim/plugins/coc/coc-pyright/coc-settings.json ~/.config/nvim/

echo "[DEBUG] Configuration done :)"
